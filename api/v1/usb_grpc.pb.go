// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: api/v1/usb.proto

package usb_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsbClient is the client API for Usb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsbClient interface {
	PutUsbDevConnState(ctx context.Context, in *PutUsbDevConnRequest, opts ...grpc.CallOption) (*PutUsbDevConnResponse, error)
	PutUsbDevDesc(ctx context.Context, in *PutUsbDevDescRequest, opts ...grpc.CallOption) (*PutUsbDevDescResponse, error)
}

type usbClient struct {
	cc grpc.ClientConnInterface
}

func NewUsbClient(cc grpc.ClientConnInterface) UsbClient {
	return &usbClient{cc}
}

func (c *usbClient) PutUsbDevConnState(ctx context.Context, in *PutUsbDevConnRequest, opts ...grpc.CallOption) (*PutUsbDevConnResponse, error) {
	out := new(PutUsbDevConnResponse)
	err := c.cc.Invoke(ctx, "/usb.v1.Usb/PutUsbDevConnState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usbClient) PutUsbDevDesc(ctx context.Context, in *PutUsbDevDescRequest, opts ...grpc.CallOption) (*PutUsbDevDescResponse, error) {
	out := new(PutUsbDevDescResponse)
	err := c.cc.Invoke(ctx, "/usb.v1.Usb/PutUsbDevDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsbServer is the server API for Usb service.
// All implementations must embed UnimplementedUsbServer
// for forward compatibility
type UsbServer interface {
	PutUsbDevConnState(context.Context, *PutUsbDevConnRequest) (*PutUsbDevConnResponse, error)
	PutUsbDevDesc(context.Context, *PutUsbDevDescRequest) (*PutUsbDevDescResponse, error)
	mustEmbedUnimplementedUsbServer()
}

// UnimplementedUsbServer must be embedded to have forward compatible implementations.
type UnimplementedUsbServer struct {
}

func (UnimplementedUsbServer) PutUsbDevConnState(context.Context, *PutUsbDevConnRequest) (*PutUsbDevConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUsbDevConnState not implemented")
}
func (UnimplementedUsbServer) PutUsbDevDesc(context.Context, *PutUsbDevDescRequest) (*PutUsbDevDescResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUsbDevDesc not implemented")
}
func (UnimplementedUsbServer) mustEmbedUnimplementedUsbServer() {}

// UnsafeUsbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsbServer will
// result in compilation errors.
type UnsafeUsbServer interface {
	mustEmbedUnimplementedUsbServer()
}

func RegisterUsbServer(s grpc.ServiceRegistrar, srv UsbServer) {
	s.RegisterService(&Usb_ServiceDesc, srv)
}

func _Usb_PutUsbDevConnState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUsbDevConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsbServer).PutUsbDevConnState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usb.v1.Usb/PutUsbDevConnState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsbServer).PutUsbDevConnState(ctx, req.(*PutUsbDevConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usb_PutUsbDevDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUsbDevDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsbServer).PutUsbDevDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usb.v1.Usb/PutUsbDevDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsbServer).PutUsbDevDesc(ctx, req.(*PutUsbDevDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Usb_ServiceDesc is the grpc.ServiceDesc for Usb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usb.v1.Usb",
	HandlerType: (*UsbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutUsbDevConnState",
			Handler:    _Usb_PutUsbDevConnState_Handler,
		},
		{
			MethodName: "PutUsbDevDesc",
			Handler:    _Usb_PutUsbDevDesc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/usb.proto",
}
